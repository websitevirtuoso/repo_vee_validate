'use strict';

const pluginutils = require('@rollup/pluginutils');
const fs = require('node:fs');
const path = require('node:path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
const path__default = /*#__PURE__*/_interopDefaultLegacy(path);

function StylelintPlugin(options = {}) {
  const cache = options?.cache ?? true;
  const cacheLocation = options?.cacheLocation ?? path__default.join("node_modules", ".vite", "vite-plugin-stylelint");
  const include = options?.include ?? [
    "src/**/*.css",
    "src/**/*.scss",
    "src/**/*.sass",
    "src/**/*.less",
    "src/**/*.styl",
    "src/**/*.vue",
    "src/**/*.svelte"
  ];
  const exclude = options?.exclude ?? ["node_modules", "virtual:"];
  const stylelintPath = options?.stylelintPath ?? "stylelint";
  const lintOnStart = options?.lintOnStart ?? false;
  const emitError = options?.emitError ?? true;
  const emitErrorAsWarning = options?.emitErrorAsWarning ?? false;
  const emitWarning = options?.emitWarning ?? true;
  const emitWarningAsError = options?.emitWarningAsError ?? false;
  const filter = pluginutils.createFilter(include, exclude);
  const isVirtualModule = (file) => !fs__default.existsSync(file);
  let stylelint;
  let lintFiles;
  return {
    name: "vite:stylelint",
    async buildStart() {
      if (!stylelint) {
        try {
          const module = await import(stylelintPath);
          stylelint = module.default;
          lintFiles = async (files) => await stylelint.lint({
            ...options,
            allowEmptyInput: true,
            cache,
            cacheLocation,
            files
          }).then((lintResults) => {
            if (!lintResults)
              return;
            const { results } = lintResults;
            results.forEach((result) => {
              const { warnings, ignored } = result;
              if (!ignored) {
                warnings.forEach((warning) => {
                  console.log("");
                  const { severity, text, line, column } = warning;
                  if (severity === "error" && emitError) {
                    if (emitErrorAsWarning) {
                      this.warn(text, { line, column });
                    } else {
                      this.error(text, { line, column });
                    }
                  } else if (severity === "warning" && emitWarning) {
                    if (emitWarningAsError) {
                      this.error(text, { line, column });
                    } else {
                      this.warn(text, { line, column });
                    }
                  }
                });
              }
            });
          }).catch((error) => {
            console.log("");
            this.error(`${error?.message ?? error}`);
          });
        } catch (error) {
          console.log("");
          this.error(
            `${error?.message ?? "Failed to import Stylelint. Have you installed and configured correctly?"}`
          );
        }
      }
      if (lintOnStart) {
        console.log("");
        this.warn(`Stylelint is linting all files in the project because \`lintOnStart\` is true.`);
        this.warn(`This will significantly slow down Vite.`);
        await lintFiles(include);
      }
    },
    async transform(_, id) {
      const file = pluginutils.normalizePath(id).split("?")[0];
      if (!filter(file) || isVirtualModule(file)) {
        return null;
      }
      await lintFiles(file);
      return null;
    }
  };
}

module.exports = StylelintPlugin;
