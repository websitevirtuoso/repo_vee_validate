{
  "version": 3,
  "sources": ["../../vuetify/src/framework.ts"],
  "sourcesContent": ["// Composables\nimport { createDefaults, DefaultsSymbol } from '@/composables/defaults'\nimport { createDisplay, DisplaySymbol } from '@/composables/display'\nimport { createIcons, IconSymbol } from '@/composables/icons'\nimport { createLocale, LocaleAdapterSymbol } from '@/composables/locale'\nimport { createTheme, ThemeSymbol } from '@/composables/theme'\nimport { RtlSymbol } from '@/composables/rtl'\n\n// Utilities\nimport { defineComponent, getUid, IN_BROWSER, mergeDeep } from '@/util'\nimport { reactive } from 'vue'\n\n// Types\nimport type { App, ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { DisplayOptions } from '@/composables/display'\nimport type { IconOptions } from '@/composables/icons'\nimport type { LocaleAdapter, LocaleOptions } from '@/composables/locale'\nimport type { RtlOptions } from '@/composables/rtl'\nimport type { ThemeOptions } from '@/composables/theme'\n\nexport * from './composables'\n\nexport interface VuetifyOptions {\n  aliases?: Record<string, any>\n  blueprint?: Blueprint\n  components?: Record<string, any>\n  directives?: Record<string, any>\n  defaults?: DefaultsOptions\n  display?: DisplayOptions\n  theme?: ThemeOptions\n  icons?: IconOptions\n  locale?: (LocaleOptions & RtlOptions) | (LocaleAdapter & RtlOptions)\n}\n\nexport interface Blueprint extends Omit<VuetifyOptions, 'blueprint'> {}\n\nexport const createVuetify = (vuetify: VuetifyOptions = {}) => {\n  const install = (app: App) => {\n    const { blueprint, ...rest } = vuetify\n    const options = mergeDeep(blueprint, rest)\n    const {\n      aliases = {},\n      components = {},\n      directives = {},\n    } = options\n\n    for (const key in directives) {\n      app.directive(key, directives[key])\n    }\n\n    for (const key in components) {\n      app.component(key, components[key])\n    }\n\n    for (const key in aliases) {\n      app.component(key, defineComponent({\n        ...aliases[key],\n        name: key,\n      }))\n    }\n\n    function provideApp (isHydrate?: boolean) {\n      app.provide(DefaultsSymbol, createDefaults(options.defaults))\n      app.provide(DisplaySymbol, createDisplay(options.display, isHydrate))\n      app.provide(ThemeSymbol, createTheme(app, options.theme))\n      app.provide(IconSymbol, createIcons(options.icons))\n      app.provide(LocaleAdapterSymbol, createLocale(app, options.locale))\n    }\n\n    if (!IN_BROWSER) {\n      provideApp()\n    }\n\n    getUid.reset()\n\n    const mount = app.mount\n    app.mount = (rootContainer: any, isHydrate?: boolean, isSVG?: boolean) => {\n      provideApp(isHydrate)\n      const ret = mount(rootContainer, isHydrate, isSVG)\n      app.mount = mount\n      return ret\n    }\n\n    // Vue's inject() can only be used in setup\n    function inject (this: ComponentPublicInstance, key: InjectionKey<any> | string) {\n      const vm = this.$\n\n      const provides = vm.parent?.provides ?? vm.vnode.appContext?.provides\n\n      if (provides && (key as any) in provides) {\n        return provides[(key as string)]\n      }\n    }\n\n    app.mixin({\n      computed: {\n        $vuetify () {\n          return reactive({\n            defaults: inject.call(this, DefaultsSymbol),\n            display: inject.call(this, DisplaySymbol),\n            theme: inject.call(this, ThemeSymbol),\n            icons: inject.call(this, IconSymbol),\n            locale: inject.call(this, LocaleAdapterSymbol),\n            rtl: inject.call(this, RtlSymbol),\n          })\n        },\n      },\n    })\n  }\n\n  return { install }\n}\n\nexport const version = __VUETIFY_VERSION__\ncreateVuetify.version = version\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCO,IAAMA,gBAAgB,WAAkC;AAAA,MAAjCC,UAAiC,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAAP,CAAA;AACtD,QAAMC,UAAWC,SAAa;AAC5B,UAAM;MAAEC;SAAcC;IAAhB,IAAyBJ;AAC/B,UAAMK,UAAUC,UAAUH,WAAWC,IAAZ;AACzB,UAAM;MACJG,UAAU,CAAA;MACVC,aAAa,CAAA;MACbC,aAAa,CAAA;IAHT,IAIFJ;AAEJ,eAAWK,OAAOD,YAAY;AAC5BP,UAAIS,UAAUD,KAAKD,WAAWC,IAA9B;IACD;AAED,eAAWA,OAAOF,YAAY;AAC5BN,UAAIU,UAAUF,KAAKF,WAAWE,IAA9B;IACD;AAED,eAAWA,OAAOH,SAAS;AACzBL,UAAIU,UAAUF,KAAKG,gBAAgB;QACjC,GAAGN,QAAQG;QACXI,MAAMJ;MAF2B,CAAD,CAAlC;IAID;AAED,aAASK,WAAYC,WAAqB;AACxCd,UAAIe,QAAQC,gBAAgBC,eAAed,QAAQe,QAAT,CAA1C;AACAlB,UAAIe,QAAQI,eAAeC,cAAcjB,QAAQkB,SAASP,SAAlB,CAAxC;AACAd,UAAIe,QAAQO,aAAaC,YAAYvB,KAAKG,QAAQqB,KAAd,CAApC;AACAxB,UAAIe,QAAQU,YAAYC,YAAYvB,QAAQwB,KAAT,CAAnC;AACA3B,UAAIe,QAAQa,qBAAqBC,aAAa7B,KAAKG,QAAQ2B,MAAd,CAA7C;IACD;AAED,QAAI,CAACC,YAAY;AACflB,iBAAU;IACX;AAEDmB,WAAOC,MAAP;AAEA,UAAMC,QAAQlC,IAAIkC;AAClBlC,QAAIkC,QAAQ,CAACC,eAAoBrB,WAAqBsB,UAAoB;AACxEvB,iBAAWC,SAAD;AACV,YAAMuB,MAAMH,MAAMC,eAAerB,WAAWsB,KAA3B;AACjBpC,UAAIkC,QAAQA;AACZ,aAAOG;IACR;AAGD,aAASC,OAAuC9B,KAAiC;AArFrF;AAqFqF,UAAA,YAAA;AAC/E,YAAM+B,KAAK,KAAKC;AAEhB,YAAMC,YAAW,mBAAAF,GAAGG,WAAH,OAAA,SAAA,WAAWD,aAAX,aAAA,uBAAuBF,GAAGI,MAAMC,eAAhC,OAAA,SAAuB,qBAAqBH;AAE7D,UAAIA,YAAajC,OAAeiC,UAAU;AACxC,eAAOA,SAAUjC;MAClB;IACF;AAEDR,QAAI6C,MAAM;MACRC,UAAU;QACRC,WAAY;AACV,iBAAOC,SAAS;YACd9B,UAAUoB,OAAOW,KAAK,MAAMjC,cAAlB;YACVK,SAASiB,OAAOW,KAAK,MAAM9B,aAAlB;YACTK,OAAOc,OAAOW,KAAK,MAAM3B,WAAlB;YACPK,OAAOW,OAAOW,KAAK,MAAMxB,UAAlB;YACPK,QAAQQ,OAAOW,KAAK,MAAMrB,mBAAlB;YACRsB,KAAKZ,OAAOW,KAAK,MAAME,SAAlB;UANS,CAAD;QAQhB;MAVO;IADF,CAAV;EAcD;AAED,SAAO;IAAEpD;EAAF;AACR;AAEM,IAAMqD,UAAO;AACpBvD,cAAcuD,UAAUA;",
  "names": ["createVuetify", "vuetify", "install", "app", "blueprint", "rest", "options", "mergeDeep", "aliases", "components", "directives", "key", "directive", "component", "defineComponent", "name", "provideApp", "isHydrate", "provide", "DefaultsSymbol", "createDefaults", "defaults", "DisplaySymbol", "createDisplay", "display", "ThemeSymbol", "createTheme", "theme", "IconSymbol", "createIcons", "icons", "LocaleAdapterSymbol", "createLocale", "locale", "IN_BROWSER", "getUid", "reset", "mount", "rootContainer", "isSVG", "ret", "inject", "vm", "$", "provides", "parent", "vnode", "appContext", "mixin", "computed", "$vuetify", "reactive", "call", "rtl", "RtlSymbol", "version"]
}
