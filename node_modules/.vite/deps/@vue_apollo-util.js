import {
  init_printer,
  printer_exports
} from "./chunk-ICDZAZMG.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-J43GMYXM.js";

// node_modules/@vue/apollo-util/dist/errorLog.js
var require_errorLog = __commonJS({
  "node_modules/@vue/apollo-util/dist/errorLog.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logErrorMessages = exports.getErrorMessages = void 0;
    var printer_1 = (init_printer(), __toCommonJS(printer_exports));
    function getErrorMessages(error) {
      const messages = [];
      const { graphQLErrors, networkError } = error;
      const operation = "operation" in error ? error.operation : void 0;
      const stack = "stack" in error ? error.stack : void 0;
      let printedQuery;
      if (operation) {
        printedQuery = (0, printer_1.print)(operation.query);
      }
      if (graphQLErrors) {
        graphQLErrors.forEach(({ message, locations }) => {
          messages.push(`[GraphQL error] ${message}`);
          if (operation) {
            messages.push(logOperation(printedQuery, locations));
            if (Object.keys(operation.variables).length) {
              messages.push(`with variables: ${JSON.stringify(operation.variables, null, 2)}`);
            }
          }
        });
      }
      if (networkError)
        messages.push(`[Network error] ${networkError}`);
      if (stack)
        messages.push(stack);
      return messages;
    }
    exports.getErrorMessages = getErrorMessages;
    function logErrorMessages(error, printStack = true) {
      getErrorMessages(error).forEach((message) => {
        const result = /\[([\w ]*)](.*)/.exec(message);
        if (result) {
          const [, tag, msg] = result;
          console.log(`%c${tag}`, "color:white;border-radius:3px;background:#ff4400;font-weight:bold;padding:2px 6px;", msg);
        } else {
          console.log(message);
        }
      });
      if (printStack) {
        let stack = new Error().stack;
        if (stack == null)
          return;
        const newLineIndex = stack.indexOf("\n");
        stack = stack.slice(stack.indexOf("\n", newLineIndex + 1));
        console.log(`%c${stack}`, "color:grey;");
      }
    }
    exports.logErrorMessages = logErrorMessages;
    function logOperation(printedQuery, locations) {
      const lines = printedQuery.split("\n");
      const l = lines.length;
      const result = lines.slice();
      const lineMap = {};
      for (let i = 0; i < l; i++) {
        lineMap[i] = i;
      }
      if (locations) {
        for (const { line, column } of locations) {
          const index = lineMap[line];
          result.splice(index, 0, "\u25B2".padStart(column, " "));
          for (let i = index + 1; i < l; i++) {
            lineMap[i]++;
          }
        }
      }
      return result.join("\n");
    }
  }
});

// node_modules/@vue/apollo-util/dist/index.js
var require_dist = __commonJS({
  "node_modules/@vue/apollo-util/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errorLog(), exports);
  }
});

// dep:@vue_apollo-util
var vue_apollo_util_default = require_dist();
export {
  vue_apollo_util_default as default
};
//# sourceMappingURL=@vue_apollo-util.js.map
